(window.webpackJsonp=window.webpackJsonp||[]).push([[91],{731:function(n,e,a){"use strict";a.r(e);var s=a(15),r=Object(s.a)({},(function(){var n=this,e=n.$createElement,a=n._self._c||e;return a("ContentSlotsDistributor",{attrs:{"slot-key":n.$parent.slotKey}},[a("h2",{attrs:{id:"前言"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#前言"}},[n._v("#")]),n._v(" 前言")]),n._v(" "),a("h3",{attrs:{id:"项目环境"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#项目环境"}},[n._v("#")]),n._v(" 项目环境")]),n._v(" "),a("ul",[a("li",[n._v("前端框架：js+jq+html+css")])]),n._v(" "),a("h2",{attrs:{id:"示例"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#示例"}},[n._v("#")]),n._v(" 示例")]),n._v(" "),a("p",[n._v("三、规划目录结构\n1、创建项目\n在指定目录中使用命令创建一个默认的项目，或者根据自己需要自己选择。")]),n._v(" "),a("p",[n._v("$ vue create .\n2、调整目录\n我们需要一个目录存放组件，一个目录存放示例，按照以下方式对目录进行改造。")]),n._v(" "),a("p",[n._v(".\n...\n|-- examples      // 原 src 目录，改成 examples 用作示例展示\n|-- packages      // 新增 packages 用于编写存放组件\n...\n.")]),n._v(" "),a("p",[a("img",{attrs:{src:"https://img-blog.csdnimg.cn/20190318112934766.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L21sb25seQ==,size_16,color_FFFFFF,t_70",alt:"在这里插入图片描述"}}),n._v("\n四、配置项目以支持新的目录结构\n我们通过上一步的目录改造后，会遇到两个问题。")]),n._v(" "),a("p",[n._v("src目录更名为examples，导致项目无法运行\n新增packages目录，该目录未加入webpack编译\n注：cli3 提供一个可选的 vue.config.js 配置文件。如果这个文件存在则他会被自动加载，所有的对项目和webpack的配置，都在这个文件中。")]),n._v(" "),a("p",[n._v("1、重新配置入口，修改配置中的 pages 选项\n新版 Vue CLI 支持使用 vue.config.js 中的 pages 选项构建一个多页面的应用。")]),n._v(" "),a("p",[n._v("这里使用 pages 修改入口到 examples")]),n._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",[a("code",[n._v("module.exports = {\n  // 修改 src 目录 为 examples 目录\n  pages: {\n    index: {\n      entry: 'examples/main.js',\n      template: 'public/index.html',\n      filename: 'index.html'\n    }\n  }\n}\n")])])]),a("p",[n._v("2、支持对 packages 目录的处理，修改配置中的 chainWebpack 选项\npackages 是我们新增的一个目录，默认是不被 webpack 处理的，所以需要添加配置对该目录的支持。")]),n._v(" "),a("p",[n._v("chainWebpack 是一个函数，会接收一个基于 webpack-chain 的 ChainableConfig 实例。允许对内部的 webpack 配置进行更细粒度的修改。")]),n._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",[a("code",[n._v("module.exports = {\n  // 修改 src 为 examples\n  pages: {\n    index: {\n      entry: 'examples/main.js',\n      template: 'public/index.html',\n      filename: 'index.html'\n    }\n  },\n  // 扩展 webpack 配置，使 packages 加入编译\n  chainWebpack: config => {\n    config.module\n      .rule('js')\n      .include\n        .add('packages')\n        .end()\n      .use('babel')\n        .loader('babel-loader')\n        .tap(options => {\n          // 修改它的选项...\n          return options\n        })\n  }\n}\n链式操作\n\nwebpack-chain\n")])])]),a("p",[n._v("五、编写组件\n以上我们已配置好对新目录架构的支持，接下来我们尝试编写组件。以下我们以一个已发布到 npm 的小插件作为示例。")]),n._v(" "),a("p",[n._v("GitHub – 颜色选择器：vcolorpicker")]),n._v(" "),a("ol",[a("li",[n._v("创建一个新组件\n在 packages 目录下，所有的单个组件都以文件夹的形式存储，所有这里创建一个目录 color-picker/\n在 color-picker/ 目录下创建 src/ 目录存储组件源码\n在 /color-picker 目录下创建 index.js 文件对外提供对组件的引用。")])]),n._v(" "),a("p",[a("img",{attrs:{src:"https://img-blog.csdnimg.cn/20190318113046292.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L21sb25seQ==,size_16,color_FFFFFF,t_70",alt:"在这里插入图片描述"}}),n._v("\n修改 /packages/color-picker/index.js文件，对外提供引用。")]),n._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",[a("code",[n._v("# /packages/color-picker/index.js\n// 导入组件，组件必须声明 name\nimport colorPicker from './src/color-picker.vue'\n\n// 为组件提供 install 安装方法，供按需引入\n    colorPicker.install = function (Vue) {\n      Vue.component(colorPicker.name, colorPicker)\n\n}\n\n// 默认导出组件\nexport default colorPicker\n")])])]),a("ol",{attrs:{start:"2"}},[a("li",[a("p",[n._v("整合所有的组件，对外导出，即一个完整的组件库\n修改 /packages/index.js 文件，对整个组件库进行导出。")]),n._v(" "),a("p",[n._v("// 导入颜色选择器组件\nimport colorPicker from './color-picker'")]),n._v(" "),a("p",[n._v("// 存储组件列表\nconst components = [\ncolorPicker\n]")]),n._v(" "),a("p",[n._v("// 定义 install 方法，接收 Vue 作为参数。如果使用 use 注册插件，则所有的组件都将被注册\nconst install = function (Vue) {\n// 判断是否安装\nif (install.installed) return\n// 遍历注册全局组件\ncomponents.map(component => Vue.component(component.name, component))\n}")]),n._v(" "),a("p",[n._v("// 判断是否是直接引入文件\nif (typeof window !== 'undefined' && window.Vue) {\ninstall(window.Vue)\n}")]),n._v(" "),a("p",[n._v("export default {\n// 导出的对象必须具有 install，才能被 Vue.use() 方法安装\ninstall,\n// 以下是具体的组件列表\ncolorPicker\n}")])])]),n._v(" "),a("p",[n._v("六、编写示例")]),n._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",[a("code",[n._v("1、在示例中导入组件库\nimport Vue from 'vue'\nimport App from './App.vue'\n\n// 导入组件库\nimport ColorPicker from './../packages/index'\n// 注册组件库\nVue.use(ColorPicker)\n\nVue.config.productionTip = false\n\nnew Vue({\n  render: h => h(App)\n}).$mount('#app')\n")])])]),a("p",[n._v("2、在示例中使用组件库中的组件\n在上一步用使用 Vue.use() 全局注册后，即可在任意页面直接使用了，而不需另外引入。当然也可以按需引入。")]),n._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",[a("code",[n._v("<template>\n    <colorPicker v-model=\"color\" v-on:change=\"headleChangeColor\"></colorPicker>\n</template>\n\n<script>\nexport default {\n    data () {\n        return {\n            color: '#ff0000'\n        }\n    },\n    methods: {\n        headleChangeColor () {\n            console.log('颜色改变')\n        }\n    }\n}\n<\/script>\n")])])]),a("p",[n._v("七、发布到 npm，方便直接在项目中引用\n到此为止我们一个完整的组件库已经开发完成了，接下来就是发布到 npm 以供后期使用。")]),n._v(" "),a("p",[n._v("1、package.json 中新增一条编译为库的命令\n在库模式中，Vue是外置的，这意味着即使在代码中引入了 Vue，打包后的文件也是不包含Vue的。")]),n._v(" "),a("p",[n._v("Vue Cli3 构建目标：库")]),n._v(" "),a("p",[n._v("以下我们在 scripts 中新增一条命令 npm run lib")]),n._v(" "),a("p",[n._v('--target: 构建目标，默认为应用模式。这里修改为 lib 启用库模式。\n--dest : 输出目录，默认 dist。这里我们改成 lib\n[entry]: 最后一个参数为入口文件，默认为 src/App.vue。这里我们指定编译 packages/ 组件库目录。\n"scripts": {\n// ...\n"lib": "vue-cli-service build --target lib --name vcolorpicker --dest lib packages/index.js"\n}\n执行编译库命令')]),n._v(" "),a("p",[n._v("$ npm run lib\n"),a("img",{attrs:{src:"https://img-blog.csdnimg.cn/20190318113159810.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L21sb25seQ==,size_16,color_FFFFFF,t_70",alt:"在这里插入图片描述"}})]),n._v(" "),a("p",[n._v("2、配置 package.json 文件中发布到 npm 的字段\nname: 包名，该名字是唯一的。可在 npm 官网搜索名字，如果存在则需换个名字。\nversion: 版本号，每次发布至 npm 需要修改版本号，不能和历史版本号相同。\ndescription: 描述。\nmain: 入口文件，该字段需指向我们最终编译后的包文件。\nkeyword：关键字，以空格分离希望用户最终搜索的词。\nauthor：作者\nprivate：是否私有，需要修改为 false 才能发布到 npm\nlicense： 开源协议\n以下为参考设置")]),n._v(" "),a("p",[n._v('{\n"name": "vcolorpicker",\n"version": "0.1.5",\n"description": "基于 Vue 的颜色选择器",\n"main": "lib/vcolorpicker.umd.min.js",\n"keyword": "vcolorpicker colorpicker color-picker",\n"private": false\n}\n3、添加 .npmignore 文件，设置忽略发布文件\n我们发布到 npm 中，只有编译后的 lib 目录、package.json、README.md才是需要被发布的。所以我们需要设置忽略目录和文件。')]),n._v(" "),a("p",[n._v("和 .gitignore 的语法一样，具体需要提交什么文件，看各自的实际情况。")]),n._v(" "),a("h1",{attrs:{id:"忽略目录"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#忽略目录"}},[n._v("#")]),n._v(" 忽略目录")]),n._v(" "),a("p",[n._v("examples/\npackages/\npublic/")]),n._v(" "),a("h1",{attrs:{id:"忽略指定文件"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#忽略指定文件"}},[n._v("#")]),n._v(" 忽略指定文件")]),n._v(" "),a("p",[n._v("vue.config.js\nbabel.config.js\n*.map")]),n._v(" "),a("p",[n._v("4、登录到 npm\n首先需要到 npm 上注册一个账号，注册过程略。")]),n._v(" "),a("p",[n._v("如果配置了淘宝镜像，先设置回npm镜像：")]),n._v(" "),a("p",[n._v("$ npm config set registry http://registry.npmjs.org\n然后在终端执行登录命令，输入用户名、密码、邮箱即可登录。")]),n._v(" "),a("p",[n._v("$ npm login\n"),a("img",{attrs:{src:"https://img-blog.csdnimg.cn/20190318113223879.png",alt:"在这里插入图片描述"}})]),n._v(" "),a("p",[n._v("5、发布到 npm\n执行发布命令，发布组件到 npm")]),n._v(" "),a("p",[n._v("$ npm publish")]),n._v(" "),a("p",[a("img",{attrs:{src:"https://img-blog.csdnimg.cn/20190318113238729.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L21sb25seQ==,size_16,color_FFFFFF,t_70",alt:"在这里插入图片描述"}}),n._v("\n6、发布成功\n发布成功后稍等几分钟，即可在 npm 官网搜索到。以下是刚提交的 vcolorpicker")]),n._v(" "),a("p",[n._v("7、使用新发布的组件库\n安装")]),n._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",[a("code",[n._v("$ npm install vcolorpicker -S\n使用\n\n# 在 main.js 引入并注册\nimport vcolorpicker from 'vcolorpicker'\nVue.use(vcolorpicker)\n\n# 在组件中使用\n<template>\n  <colorPicker v-model=\"color\" />\n</template>\n<script>\n  export default {\n    data () {\n      return {\n        color: '#ff0000'\n      }\n    }\n  }\n<\/script>\n")])])]),a("h2",{attrs:{id:"后记"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#后记"}},[n._v("#")]),n._v(" 后记")]),n._v(" "),a("p",[n._v("目前仍在不断地探索中\n"),a("a",{attrs:{href:"https://blog.csdn.net/mlonly",target:"_blank",rel:"noopener noreferrer"}},[n._v("链接去博主的csdn"),a("OutboundLink")],1)])])}),[],!1,null,null,null);e.default=r.exports}}]);